


ARM Macro Assembler    Page 1 


    1 00000000         ; ECE-222 Lab ... Winter 2013 term 
    2 00000000         ; Lab 3 sample code
    3 00000000         
    4 00000000         
    5 00000000         
    6 00000000         
    7 00000000         ; register LUT
    8 00000000         ; - R10 Permenant pinter to the base address for the LED
                       S
    9 00000000         ; - R11 Permenant occupied
   10 00000000         ; - R0  Delay Repeat times
   11 00000000         ; - R1  Store the INT0 push button
   12 00000000         ; - R8  Store the INT0 status bit, later used for a copy
                        of the reaction time (R9)
   13 00000000         ; - R9  Reaction time counter
   14 00000000         ; - R5 Globally used for which part of R9 is displaying
   15 00000000         
   16 00000000         
   17 00000000         
   18 00000000                 THUMB                        ; Thumb instruction
                                                             set 
   19 00000000                 AREA             My_code, CODE, READONLY
   20 00000000                 EXPORT           __MAIN
   21 00000000                 ENTRY
   22 00000000         __MAIN
   23 00000000         
   24 00000000         ; The following lines are similar to Lab-1 but use a def
                       ined address to make it easier.
   25 00000000         ; They just turn off all LEDs 
   26 00000000 F8DF A130       LDR              R10, =LED_BASE_ADR ; R10 is a p
                                                            ermenant pointer to
                                                             the base address f
                                                            or the LEDs, offset
                                                             of 0x20 and 0x40 f
                                                            or the ports
   27 00000004         
   28 00000004 F04F 4330       MOV              R3, #0xB0000000 ; Turn off thre
                                                            e LEDs on port 1  
   29 00000008 F8CA 3020       STR              R3, [r10, #0x20]
   30 0000000C F04F 037C       MOV              R3, #0x0000007C
   31 00000010 F8CA 3040       STR              R3, [R10, #0x40] ; Turn off fiv
                                                            e LEDs on port 2 
   32 00000014         
   33 00000014         ;SIMPLE_RESET
   34 00000014         ;    MOV   R1, #0
   35 00000014         ;SIMPLE_COUNTER
   36 00000014         ;    ADD   R1, #1
   37 00000014         ;    MOV   R3, R1
   38 00000014         ;    BL   DISPLAY_NUM
   39 00000014         ;    MOV   R0, #0x3E8
   40 00000014         ;    BL   DELAY
   41 00000014         ;    CMP   R1, #256
   42 00000014         ;    BNE   SIMPLE_COUNTER
   43 00000014         ;    BEQ   SIMPLE_RESET
   44 00000014         
   45 00000014         ; This line is very important in your main program
   46 00000014         ; Initializes R11 to a 16-bit non-zero value and NOTHING
                        else can write to R11 !!
   47 00000014 F64A 3BCD       MOV              R11, #0xABCD ; Init the random 



ARM Macro Assembler    Page 2 


                                                            number generator wi
                                                            th a non-zero numbe
                                                            r
   48 00000018 F000 F82D       BL               RandomNum   ; Will return with 
                                                            R11 that contains t
                                                            he random number de
                                                            lay
   49 0000001C         
   50 0000001C         ;MOV  R0, R11
   51 0000001C F000 F859       BL               DELAY
   52 00000020         
   53 00000020         TURN_P1_29_ON
   54 00000020         
   55 00000020 F06F 5200       MOV              R2, #0xDFFFFFFF
   56 00000024         ;LDR   R4, [R10]
   57 00000024         ;EOR   R4, R4, R2
   58 00000024 F8CA 2020       STR              R2, [R10, #0x20]
   59 00000028         
   60 00000028 F04F 0800       MOV              R8, #0
   61 0000002C F04F 0900       MOV              R9, #0
   62 00000030 E059            B                PULLING_IO
   63 00000032         ; Display the number in R3 onto the 8 LEDs
   64 00000032         DISPLAY_NUM
   65 00000032         ;The reason we flip the bits, is once we refer the chart
                       , we can notice an
   66 00000032         ; ascending order for port 1 and port 2, that leads to a
                        ordering issue as
   67 00000032         ; our register logically was designed to be in decending
                        order, not to mention
   68 00000032         ; that we have 2 different ports to manipulate, and one 
                       of them is not
   69 00000032         ; consecutive
   70 00000032         
   71 00000032         ; therefore the general logic will be we take the requir
                       ed bits, flip the order
   72 00000032         ; then push them to the correct position, modify the con
                       tent inside those pins
   73 00000032         ; without touching the rest, since they serve for other 
                       purposes
   74 00000032 B526            STMFD            R13!,{R1, R2, R5, R14}
   75 00000034         ; reset the registers just in case
   76 00000034 F04F 0100       MOV              R1,#0x0
   77 00000038 F04F 0200       MOV              R2,#0x0
   78 0000003C F04F 0500       MOV              R5,#0x0
   79 00000040         ; we move the content inside R3 to R5, note that R3 come
                       s from SHOW_ON_LED
   80 00000040         ; now R3 contains those 8 bits with LED on/off info in t
                       he LS 8 bits
   81 00000040 F363 0507       BFI              R5, R3, #0, #8 ; Replace bit 0 
                                                            to bit 7 (8 bits) o
                                                            f R5 with
   82 00000044         ; bit 0 to bit 7 from R3
   83 00000044 F365 0204       BFI              R2, R5, #0, #5 ;P2 ORDER: 2,3,4
                                                            ,5,6. Take the firs
                                                            t 5 bits and store 
                                                            it in R2
   84 00000048         
   85 00000048 EA4F 1555       LSR              R5, R5, #5  ;shifting the 5 bit
                                                            s that are put into



ARM Macro Assembler    Page 3 


                                                             R2
   86 0000004C F365 0102       BFI              R1, R5, #0, #3 ;P1 ORDER: 28,29
                                                            ,31. Take the MSB 3
                                                             bits and store it 
                                                            in R1
   87 00000050         
   88 00000050         
   89 00000050 FA91 F1A1       RBIT             R1, R1      ; Reverse the order
                                                             of bits in R1 (P1 
                                                            ORDER currently: 31
                                                            ,30,29)
   90 00000054 FA92 F2A2       RBIT             R2, R2      ; Reverse the order
                                                             of the bits in R2 
                                                            (P2 ORDER: 6,5,4,3,
                                                            2,1)
   91 00000058         
   92 00000058         
   93 00000058 EA4F 0151       LSR              R1, R1, #1  ; Shift R1 bits to 
                                                            the right by 1 bit 
                                                            (31st bit is now at
                                                             30th bit location)
                                                            
   94 0000005C F101 4180       ADD              R1,#0x40000000 ; ADDS 1 to the 
                                                            30th bit to brings 
                                                            the ("31st" bit to 
                                                            the 31st location)
   95 00000060 EA4F 6252       LSR              R2, R2, #25 ; Shift R2 bits to 
                                                            the right by 26 bit
                                                            s
   96 00000064         
   97 00000064         ;EOR means if the number is the same -> 0, if not the sa
                       me -> 1
   98 00000064         ;EOR         R1,#0xFFFFFFFF            ;0 becomes 1 and 
                       1 becomes 0 for bit 31,29,28:    Register for Port 1 is 
                       complete
   99 00000064 F081 4130       EOR              R1,#0xB0000000
  100 00000068 F082 027C       EOR              R2,#0x07C   ;0 becomes 1 and 1 
                                                            becomes 0 for bit 6
                                                            -2:    Register for
                                                             Port 2 complete
  101 0000006C         ;EOR         R2,#0xFFFFFFFF
  102 0000006C         
  103 0000006C F8CA 1020       STR              R1, [R10, #0x20]
  104 00000070 F8CA 2040       STR              R2, [R10, #0x40]
  105 00000074         
  106 00000074         
  107 00000074         ; Usefull commaands:  RBIT (reverse bits), BFC (bit fiel
                       d clear), LSR & LSL to shift bits left and right, ORR & 
                       AND and EOR for bitwise operations
  108 00000074         
  109 00000074 BD26            LDMFD            R13!,{R1, R2, R5, R15}
  110 00000076         
  111 00000076         ;
  112 00000076         ; R11 holds a 16-bit random number via a pseudo-random s
                       equence as per the Linear feedback shift register (Fibon
                       acci) on WikiPedia
  113 00000076         ; R11 holds a non-zero 16-bit number.  If a zero is fed 
                       in the pseudo-random sequence will stay stuck at 0
  114 00000076         ; Take as many bits of R11 as you need.  If you take the



ARM Macro Assembler    Page 4 


                        lowest 4 bits then you get a number between 1 and 15.
  115 00000076         ;   If you take bits 5..1 you'll get a number between 0 
                       and 15 (assuming you right shift by 1 bit).
  116 00000076         ;
  117 00000076         ; R11 MUST be initialized to a non-zero 16-bit value at 
                       the start of the program OR ELSE!
  118 00000076         ; R11 can be read anywhere in the code but must only be 
                       written to by this subroutine
  119 00000076 B53E    RandomNum
                               STMFD            R13!,{R1, R2, R3, R4, R5, R14}
  120 00000078         
  121 00000078 F04F 0509       MOV              R5, #9
  122 0000007C F40B 4100       AND              R1, R11, #0x8000
  123 00000080 F40B 5200       AND              R2, R11, #0x2000
  124 00000084 EA4F 0282       LSL              R2, #2
  125 00000088 EA81 0302       EOR              R3, R1, R2
  126 0000008C F40B 5180       AND              R1, R11, #0x1000
  127 00000090 EA4F 01C1       LSL              R1, #3
  128 00000094 EA83 0301       EOR              R3, R3, R1
  129 00000098 F40B 6180       AND              R1, R11, #0x0400
  130 0000009C EA4F 1141       LSL              R1, #5
  131 000000A0 EA83 0301       EOR              R3, R3, R1  ; the new bit to go
                                                             into the LSB is pr
                                                            esent
  132 000000A4 EA4F 33D3       LSR              R3, #15
  133 000000A8 EA4F 0B4B       LSL              R11, #1
  134 000000AC EA4B 0B03       ORR              R11, R11, R3
  135 000000B0         ;MOV   R11, #0x4E20
  136 000000B0         
  137 000000B0         
  138 000000B0         
  139 000000B0 FB9B F1F5       SDIV             R1, R11, R5 ; R1 = R11 / 9
  140 000000B4 2900            CMP              R1, #0      ; Compare quotient 
                                                            to 0
  141 000000B6 DA01            BGE              Positive
  142 000000B8 F1C1 0100       NEG              R1, R1      ; If negative, nega
                                                            te it to get abs va
                                                            lue
  143 000000BC         Positive
  144 000000BC FB01 F205       MUL              R2, R1, R5  ; R2 = abs(quotient
                                                            ) * 9
  145 000000C0 EBAB 0302       SUB              R3, R11, R2 ; R3 = R11 - R2, wh
                                                            ich is R11 mod 9
  146 000000C4 F103 0305       ADD              R3, R3, #5  ; R3 = (R11 mod 9) 
                                                            + 2
  147 000000C8 F644 6420       MOV              R4, #20000  ; Move 10000 into R
                                                            4
  148 000000CC FB03 F004       MUL              R0, R3, R4  ; R0 = R3 * 10000
  149 000000D0         
  150 000000D0         
  151 000000D0 BD3E            LDMFD            R13!,{R1, R2, R3, R4, R5, R15}
  152 000000D2         
  153 000000D2         ;
  154 000000D2         ;  Delay 0.1ms (100us) * R0 times
  155 000000D2         ;   aim for better than 10% accuracy
  156 000000D2         ;               The formula to determine the number of l
                       oop cycles is equal to Clock speed x Delay time / (#cloc
                       k cycles)
  157 000000D2         ;               where clock speed = 4MHz and if you use 



ARM Macro Assembler    Page 5 


                       the BNE or other conditional branch command, the #clock 
                       cycles =
  158 000000D2         ;               2 if you take the branch, and 1 if you d
                       on't.
  159 000000D2         ;-------------------------------------------------------
                       --------------------
  160 000000D2         DELAY
  161 000000D2 B504            STMFD            R13!,{R2, R14} ; only R2 and R1
                                                            4 preserved
  162 000000D4         Refill
  163 000000D4 B130            CBZ              R0, exitDelay
  164 000000D6 F1A0 0001       SUB              R0, #1
  165 000000DA         ;MOV   R2, #1
  166 000000DA F04F 0285       MOV              R2, #0x085
  167 000000DE         LOOP
  168 000000DE 3A01            SUBS             R2, #1
  169 000000E0 D1FD            BNE              LOOP
  170 000000E2 D0F7            BEQ              Refill
  171 000000E4         
  172 000000E4         
  173 000000E4 BD04    exitDelay
                               LDMFD            R13!,{R2, R15}
  174 000000E6         ;-------------------------------------------------------
                       --------------------
  175 000000E6         
  176 000000E6         ;-------------------------------------------------------
                       --------------------
  177 000000E6         PULLING_IO
  178 000000E6 4914            LDR              R1, =FIO2PIN
  179 000000E8 6809            LDR              R1, [R1]    ; here we store con
                                                            tent inside FIO2PIN
                                                            
  180 000000EA         
  181 000000EA EA4F 2191       LSR              R1, #10     ; logic shift right
                                                             10 bits since INT0
                                                             status stores in t
                                                            he index 10 of FIO2
                                                            PIN
  182 000000EE F361 0800       BFI              R8, R1, #0, #1 ; We take the LS
                                                            B of R1, store it i
                                                            nto R8
  183 000000F2         
  184 000000F2 F04F 0001       MOV              R0, #1      ; introduce 100mus 
                                                            delay counter
  185 000000F6 F7FF FFEC       BL               DELAY       ; automatic return
  186 000000FA         
  187 000000FA F109 0901       ADD              R9, #1
  188 000000FE         
  189 000000FE F1B8 0F00       CMP              R8, #0
  190 00000102 D1F0            BNE              PULLING_IO
  191 00000104 46C8            MOV              R8, R9
  192 00000106         ; if not pulling IO part ends, and we are nevering going
                        to return to this point
  193 00000106         ; R8 now becomes the copy of R9, reaction time
  194 00000106         ;-------------------------------------------------------
                       ----------------------
  195 00000106         RESET
  196 00000106 46C1            MOV              R9, R8      ; reset R9 using R8
                                                             which also means w



ARM Macro Assembler    Page 6 


                                                            e are opearting on 
                                                            R9
  197 00000108 F04F 0504       MOV              R5, #4      ; reset R5 as the c
                                                            ounter for which pa
                                                            rt of the 32 bit re
                                                            gister is displayin
                                                            g
  198 0000010C         SHOW_ON_LED
  199 0000010C F04F 0300       MOV              R3, #0      ; reset R3 as a sto
                                                            rage of the 8 bit n
                                                            umbers
  200 00000110 F369 0307       BFI              R3, R9, #0, #8 ; move the LSB 8
                                                             bits of R9, to R3
  201 00000114         
  202 00000114 EA4F 2919       LSR              R9, #8      ; Logic shift right
                                                             8 bits for the use
                                                             of next loop
  203 00000118 F7FF FF8B       BL               DISPLAY_NUM ; branch to display
                                                             num with the value
                                                             in R3
  204 0000011C F644 6020       MOV              R0, #0x4E20 ; introduce a 2s de
                                                            lay
  205 00000120 F7FF FFD7       BL               DELAY
  206 00000124 3D01            SUBS             R5, #1      ; subtract counter 
                                                            by 1, and also upda
                                                            te the PSR flag
  207 00000126         
  208 00000126 D1F1            BNE              SHOW_ON_LED ; if not equal to 0
                                                            , it means the cycl
                                                            e is not done and t
                                                            here is more bits t
                                                            o dispaly
  209 00000128 F24C 3050       MOV              R0, #0xC350 ; if BNE instructio
                                                            n is not passed, th
                                                            en it comes to here
                                                            , introduce additio
                                                            nal 5 second delay 
                                                            to make a total 5 s
                                                            econd delay
  210 0000012C F7FF FFD1       BL               DELAY
  211 00000130 D0E9            BEQ              RESET
  212 00000132         
  213 00000132         
  214 00000132         
  215 00000132         
  216 00000132         
  217 00000132         
  218 00000132         
  219 00000132         
  220 00000132         
  221 00000132         
  222 00000132         
  223 00000132 2009C000 
                       LED_BASE_ADR
                               EQU              0x2009c000  ; Base address of t
                                                            he memory that cont
                                                            rols the LEDs 
  224 00000132 4002C00C 
                       PINSEL3 EQU              0x4002c00c  ; Address of Pin Se



ARM Macro Assembler    Page 7 


                                                            lect Register 3 for
                                                             P1[31:16]
  225 00000132 4002C010 
                       PINSEL4 EQU              0x4002c010  ; Address of Pin Se
                                                            lect Register 4 for
                                                             P2[15:0]
  226 00000132 2009C054 
                       FIO2PIN EQU              0x2009c054  ; Address of FIO2PI
                                                            N
  227 00000132         ; Usefull GPIO Registers
  228 00000132         ; FIODIR  - register to set individual pins as input or 
                       output
  229 00000132         ; FIOPIN  - register to read and write pins
  230 00000132         ; FIOSET  - register to set I/O pins to 1 by writing a 1
                       
  231 00000132         ; FIOCLR  - register to clr I/O pins to 0 by writing a 1
                       
  232 00000132         
  233 00000132 00 00           ALIGN
  234 00000134         
  235 00000134                 END
              2009C000 
              2009C054 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\lab_3_program.d -o.\objects\lab_3_program.o -I.\RTE\_Tar
get_1 -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.7.1\Device\Include -IC:\Keil_v5\
ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SE
TA 529" --predefine="LPC175x_6x SETA 1" --list=.\listings\lab_3_program.lst Lab
_3_program.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DELAY 000000D2

Symbol: DELAY
   Definitions
      At line 160 in file Lab_3_program.s
   Uses
      At line 51 in file Lab_3_program.s
      At line 185 in file Lab_3_program.s
      At line 205 in file Lab_3_program.s
      At line 210 in file Lab_3_program.s

DISPLAY_NUM 00000032

Symbol: DISPLAY_NUM
   Definitions
      At line 64 in file Lab_3_program.s
   Uses
      At line 203 in file Lab_3_program.s
Comment: DISPLAY_NUM used once
LOOP 000000DE

Symbol: LOOP
   Definitions
      At line 167 in file Lab_3_program.s
   Uses
      At line 169 in file Lab_3_program.s
Comment: LOOP used once
My_code 00000000

Symbol: My_code
   Definitions
      At line 19 in file Lab_3_program.s
   Uses
      None
Comment: My_code unused
PULLING_IO 000000E6

Symbol: PULLING_IO
   Definitions
      At line 177 in file Lab_3_program.s
   Uses
      At line 62 in file Lab_3_program.s
      At line 190 in file Lab_3_program.s

Positive 000000BC

Symbol: Positive
   Definitions
      At line 143 in file Lab_3_program.s
   Uses
      At line 141 in file Lab_3_program.s
Comment: Positive used once
RESET 00000106

Symbol: RESET
   Definitions
      At line 195 in file Lab_3_program.s
   Uses
      At line 211 in file Lab_3_program.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: RESET used once
RandomNum 00000076

Symbol: RandomNum
   Definitions
      At line 119 in file Lab_3_program.s
   Uses
      At line 48 in file Lab_3_program.s
Comment: RandomNum used once
Refill 000000D4

Symbol: Refill
   Definitions
      At line 162 in file Lab_3_program.s
   Uses
      At line 170 in file Lab_3_program.s
Comment: Refill used once
SHOW_ON_LED 0000010C

Symbol: SHOW_ON_LED
   Definitions
      At line 198 in file Lab_3_program.s
   Uses
      At line 208 in file Lab_3_program.s
Comment: SHOW_ON_LED used once
TURN_P1_29_ON 00000020

Symbol: TURN_P1_29_ON
   Definitions
      At line 53 in file Lab_3_program.s
   Uses
      None
Comment: TURN_P1_29_ON unused
__MAIN 00000000

Symbol: __MAIN
   Definitions
      At line 22 in file Lab_3_program.s
   Uses
      At line 20 in file Lab_3_program.s
Comment: __MAIN used once
exitDelay 000000E4

Symbol: exitDelay
   Definitions
      At line 173 in file Lab_3_program.s
   Uses
      At line 163 in file Lab_3_program.s
Comment: exitDelay used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

FIO2PIN 2009C054

Symbol: FIO2PIN
   Definitions
      At line 226 in file Lab_3_program.s
   Uses
      At line 178 in file Lab_3_program.s
Comment: FIO2PIN used once
LED_BASE_ADR 2009C000

Symbol: LED_BASE_ADR
   Definitions
      At line 223 in file Lab_3_program.s
   Uses
      At line 26 in file Lab_3_program.s
Comment: LED_BASE_ADR used once
PINSEL3 4002C00C

Symbol: PINSEL3
   Definitions
      At line 224 in file Lab_3_program.s
   Uses
      None
Comment: PINSEL3 unused
PINSEL4 4002C010

Symbol: PINSEL4
   Definitions
      At line 225 in file Lab_3_program.s
   Uses
      None
Comment: PINSEL4 unused
4 symbols
352 symbols in table
